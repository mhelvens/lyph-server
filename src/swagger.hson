{
	swagger: "2.0",
	info: {

	},
	host: "http://localhost:3000",
	consumes: ["application/json"],
	produces: ["application/json"],
	paths: {

		// TODO: enforce that name/uri-ish fields are not empty strings

		"/lyphTemplates": {
			get: {
				summary: "find all lyph templates",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}": {
			get: {
				summary: "find lyph templates by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}/layers": {
			get: {
				summary: "",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}/layers/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}/materialIn": {
			get: {
				summary: "",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}/materialIn/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphTemplates/{id}/instantiations": {
			get: {
				summary: "",
				responses: {

				}
			}
			// intentionally no other verbs (instantiation has 1 template from creation)
		},

		// intentionally no "/lyphTemplates/{id}/instantiatedLyphs/{id2}" (instantiation has 1 template from creation)

		"/layerTemplates": { // field: lyphTemplate
			get: {
				summary: "find all lyph-layer templates",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/layerTemplates/{id}": {
			get: {
				summary: "find lyph-layer templates by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/layerTemplates/{id}/materials": { // = set of lyphTemplates
			get: {
				summary: "",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/layerTemplates/{id}/materials/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/layerTemplates/{id}/instantiations": {
			get: {
				summary: "",
				responses: {

				}
			}
			// intentionally no other verbs (instantiation has 1 template from creation)
		},

		// intentionally no "/layerTemplates/{id}/instantiations/{id2}" (instantiation has 1 template from creation)

		"/lyphs": {
			// fields: template, closedAt (0 or more of ['plus', 'minus'])
			get: {
				summary: "find all lyphs",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphs/{id}": {
			get: {
				summary: "find lyphs by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/lyphs/{id}/layers": {
			get: {}
			// intentionally no other verbs (layers sync through templates)
		},

		// intentionally no "/lyphs/{id}/layers/{id2}" (layers sync through templates)

		"/lyphs/{id}/locatedMeasures": {
			get: {},
			put: {},
			post: {}
		},

		"/lyphs/{id}/locatedMeasures/{id2}": {
			delete: {}
		},

		"/lyphs/{id}/inCompartments": {
			get: {},
			put: {},
			post: {}
		},

		"/lyphs/{id}/inCompartments/{id2}": {
			delete: {}
		},

		"/lyphs/{id}/inLayers": {
			// TODO: enforce that if a lyph is in more than 1 layer, that all those layers coalesce
			get: {},
			put: {},
			post: {}
		},

		"/lyphs/{id}/inLayers/{id2}": {
			delete: {}
		},

		"/layers": { // fields: template
			get: {
				summary: "find all lyph-layers",
				responses: {

				}
			}
			// intentionally no other verbs (layers sync through templates)
		},

		"/layers/{id}": {
			get: {
				summary: "find lyph-layers by id",
				responses: {

				}
			}
			// intentionally no other verbs (layers sync through templates)
		},

		"/layers/{id}/lyphs": {
			get: {},
			put: {},
			post: {}
		},

		"/layers/{id}/lyphs/{id2}": {
			delete: {}
		},

		"/layers/{id}/nodes": { // with border-specification
			get: {},
			put: {},
			post: {}
		},

		"/layers/{id}/nodes/{id2}": { // with border-specification
			delete: {}
		},

		"/layers/{id}/coalescesWith": { // set of other layers
			// TODO: enforce symmetry of coalescence
			// TODO: enforce that the layer is the outermost layer of a lyph
			// TODO: enforce that all layers have the same layer template
			get: {},
			put: {},
			post: {}
		},

		"/layers/{id}/coalescesWith/{id2}": { // set of other layers
			delete: {}
		},

		// TODO: avoid loops in "/layerTemplates/{id}/materials" + "/lyphTemplates/{id}/layers" relationships
		// TODO: avoid loops in "/lyphs/{id}/layers"             + "/layers/{id}/lyphs"         relationships
		// TODO: enforce that the positions of layers start at 0 and are sequential / without gaps

		// enforce that layers of instantiated lyphs correspond to the layer(Template)s of the lyph template
		// DONE: by syncing from layerTemplates to layers

		"/compartments/{id}/lyphs": {
			get: {},
			put: {},
			post: {}
		},

		"/compartments/{id}/lyphs/{id2}": {
			delete: {}
		},

		"/nodes": {
			get: {
				summary: "find all nodes",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/nodes/{id}": {
			get: {
				summary: "find nodes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/nodes/{id}/attachments": { // with border-specification
			get: {
				summary: "find all borders attached to a specific node",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/nodes/{id}/attachments/{id2}": { // with border-specification
			delete: {
				summary: "",
				responses: {

				}
			}
		},


		// TODO: enforce that a node is not on the inner border of layer 0 (the axis)
		// TODO: enforce that a node cannot be on more than one border of the same layer
		// TODO: enforce that when a node is placed 'between' layers, it is registered on both (inner, outer)
		// TODO: enforce node placement w.r.t. coalescence
		// TODO: if a node is on plus/minus of lyphA(layer i), and on outer/inner of lyphB(layer j),
		//     : then lyphA is inside of lyphB(layer j +/- 1)
		//     : (unless it's the outer border of the outer layer of lyphB; then it's not necessary)
		//     : IN OTHER WORDS: orthogonal placement of lyph inside housing layer


		"/correlations": { // field: publication
			get: {
				summary: "find all correlations",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/correlations/{id}": {
			get: {
				summary: "find correlations by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/correlations/{id}/clinicalIndices": {
			get: {
				summary: "find all clinical indices involved in a specific correlation",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/correlations/{id}/clinicalIndices/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/correlations/{id}/locatedMeasures": {
			get: {
				summary: "find all located measures involved in a specific correlation",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/correlations/{id}/locatedMeasures/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a correlation has >= 2 variables associated with it

		"/publications": {
			get: {
				summary: "find all publications",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/publications/{id}": {
			get: {
				summary: "find publications by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/publications/{id}/correlations": {
			// fields: uri (e.g., pubmed)
			get: {},
			put: {},
			post: {}
		},

		"/publications/{id}/correlations/{id2}": {
			delete: {}
		},

		// TODO: enforce that no two publications have the same 'pubmed uri'

		"/clinicalIndices": {
			get: {
				summary: "find all clinical indices",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/clinicalIndices/{id}": {
			get: {
				summary: "find clinical indices by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/clinicalIndices/{id}/correlations": {
			get: {},
			put: {},
			post: {}
		},

		"/clinicalIndices/{id}/correlations/{id2}": {
			delete: {}
		},

		"/locatedMeasures": { // field: lyph
			get: {
				summary: "find all located measures",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/locatedMeasures/{id}": { // field: lyph
			get: {
				summary: "find located measures by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/locatedMeasures/{id}/correlations": {
			get: {},
			put: {},
			post: {}
		},

		"/locatedMeasures/{id}/correlations/{id2}": {
			delete: {}
		},

		"/locatedMeasures/{id}/bagsOfPathologies": {
			get: {},
			put: {},
			post: {}
		},

		"/locatedMeasures/{id}/bagsOfPathologies/{id2}": {
			delete: {}
		},

		"/bagsOfPathologies": {
			get: {
				summary: "find all bags of pathologies",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}": {
			get: {
				summary: "find bags of pathologies by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/locatedMeasures": {
			get: {
				summary: "find all located measures associated with a specific bag of pathologies",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/locatedMeasures/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/removedProcesses": {
			get: {
				summary: "find all processes removed by a specific bag of pathologies",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/removedProcesses/{id2}": {
			// {from, to} objects, but no href
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/addedProcesses": {
			get: {
				summary: "find all potential processes added by a specific bag of pathologies",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/bagsOfPathologies/{id}/addedProcesses/{id2}": {
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a bag of pathologies has at least one 'thing' in it

		"/potentialProcesses": { // fields: from, to (nodes)
			get: {
				summary: "find all potential processes",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/potentialProcesses/{id}": {
			get: {
				summary: "find potential processes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		"/processes": { // fields: from, to (nodes)
			get: {
				summary: "find all processes",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		"/processes/{id}": {
			get: {
				summary: "find processes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a process does not go from x to y, when x and y are on the same border

		"/processes/{id}/removedByBagsOfPathologies": {
			get: {},
			put: {},
			post: {}
		},

		"/processes/{id}/removedByBagsOfPathologies/{id2}": {
			delete: {}
		}

	}
}
