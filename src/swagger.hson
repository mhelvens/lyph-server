{
	swagger: '2.0',
	info: {
		title: "Open Physiology Lyph System",
		description: "REST API for anatomical lyph systems and related constructs"
	},
	host: 'http://localhost:3000',
	consumes: ['application/json'],
	produces: ['application/json'],
	definitions: {

		////////////////////////////////////////

		key: {
			type: 'object',
			properties: {
				href: { type: 'string', required: true }
			},
			'x-skip-db': true
		},

		mandatoryKey: {
			allOf: [
				{ $ref: '#/definitions/key' },
				{ required: true            }
			]
		},

		keyList: {
			type: 'array',
			items: { $ref: '#/definitions/key' },
			'x-skip-db': true
		},

		uri: {
			type: 'string'
		},

		border: {
			type: 'string',
			enum: ['plus', 'minus', 'inner', 'outer']
		},

		polarity: {
			type: 'string',
			enum: ['plus', 'minus']
		},

		////////////////////////////////////////

		LyphTemplate: {
			'x-singular': "lyph template",
			'x-plural':   "lyph templates",
			type: 'object',
			properties: {
				name:           { type: 'string', required: true },
				layers:         { $ref: '#/definitions/keyList'  },
				materialIn:     { $ref: '#/definitions/keyList'  },
				instantiations: { $ref: '#/definitions/keyList'  }
			}
		},

		LayerTemplate: {
			'x-singular': "layer template",
			'x-plural':   "layer templates",
			type: 'object',
			properties: {
				name:         { type: 'string'              },
				lyphTemplate: { $ref: '#/definitions/key'   },
				position:     { type: 'integer', minimum: 0 },
				thickness:    {
					type: 'array', // [min, max]
					items: { type: 'number', minimum: 0 },
					minItems: 2,
					maxItems: 2,
					required: true
				},
				materials:      { $ref: '#/definitions/keyList'  },
				instantiations: { $ref: '#/definitions/keyList'  }
			}
		},

		Lyph: {
			'x-singular': "lyph",
			'x-plural':   "lyphs",
			type: 'object',
			properties: {
				name:            { type: 'string',  required: true    },
				species:         { type: 'string',  required: true    },
				template:        { $ref: '#/definitions/mandatoryKey' },
				location:        { $ref: '#/definitions/key'          },
				layers:          { $ref: '#/definitions/keyList'      },
				locatedMeasures: { $ref: '#/definitions/keyList'      },
				inCompartments:  { $ref: '#/definitions/keyList'      },
				inLayers:        { $ref: '#/definitions/keyList'      },
				closedAt: {
					type: 'array',
					items: { $ref: '#/definitions/polarity'  },
					uniqueItems: true,
					maxItems:    2
				}
			}
		},

		Layer: {
			'x-singular': "layer",
			'x-plural':   "layers",
			type: 'object',
			properties: {
				template:      { $ref: '#/definitions/mandatoryKey' },
				lyph:          { $ref: '#/definitions/mandatoryKey' },
				lyphs:         { $ref: '#/definitions/keyList'      },
				coalescesWith: { $ref: '#/definitions/keyList'      },
				'plus':        { $ref: '#/definitions/keyList'      },
				'minus':       { $ref: '#/definitions/keyList'      },
				'inner':       { $ref: '#/definitions/keyList'      },
				'outer':       { $ref: '#/definitions/keyList'      }
			}
		},

		Compartment: {
			'x-singular': "compartment",
			'x-plural':   "compartments",
			properties: {
				lyphs: { $ref: '#/definitions/keyList' }
			}
		},

		Node: {
			'x-singular': "node",
			'x-plural':   "nodes",
			type: 'object',
			properties: {
				attachments: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							layer:  { type: 'integer', minValue: 0,               required: true    },
							border: { allOf: [{ $ref: '#/definitions/border' }, { required: true }] }
						}
					},
					minItems:    1,
					required:    true,
					'x-skip-db': true
				}
			}
		},

		Correlation: {
			'x-singular': "correlation",
			'x-plural':   "correlations",
			type: 'object',
			properties: {
				publication:     { $ref: '#/definitions/mandatoryKey' },
				comment:         { type: 'string'                     },
				clinicalIndices: { $ref: '#/definitions/keyList'      },
				locatedMeasures: { $ref: '#/definitions/keyList'      }
			}
		},

		Publication: {
			'x-singular': "publication",
			'x-plural':   "publications",
			type: 'object',
			properties: {
				uri:          { allOf: [{ $ref: '#/definitions/uri' }, { required: true }] },
				title:        { type: 'string'                                             },
				correlations: { $ref: '#/definitions/keyList'                              }
			}
		},

		ClinicalIndex: {
			'x-singular': "clinical index",
			'x-plural':   "clinical indices",
			type: 'object',
			properties: {
				uri:          { allOf: [{ $ref: '#/definitions/uri' }, { required: true }] },
				title:        { type: 'string'                                             },
				correlations: { $ref: '#/definitions/keyList'                              }
			}
		},

		LocatedMeasure: {
			'x-singular': "located measure",
			'x-plural':   "located measures",
			type: 'object',
			properties: {
				quality:           { type: 'string', required: true },
				lyph:              { $ref: '#/definitions/key'      },
				correlations:      { $ref: '#/definitions/keyList'  },
				bagsOfPathologies: { $ref: '#/definitions/keyList'  }
			}
		},

		BagOfPathologies: {
			'x-singular': "bag of pathologies",
			'x-plural':   "bags of pathologies",
			type: 'object',
			properties: {
				locatedMeasures:  { $ref: '#/definitions/keyList' },
				removedProcesses: { $ref: '#/definitions/keyList' },
				addedProcesses:   { $ref: '#/definitions/keyList' }
			}
		},

		Process: {
			'x-singular': "process",
			'x-plural':   "processes",
			type: 'object',
			properties: {
				source:                     { $ref: '#/definitions/mandatoryKey' },
				target:                     { $ref: '#/definitions/mandatoryKey' },
				removedByBagsOfPathologies: { $ref: '#/definitions/keyList'      }
			}
		},

		PotentialProcess: {
			'x-singular': "potential process",
			'x-plural':   "potential processes",
			type: 'object',
			properties: {
				source:                   { $ref: '#/definitions/mandatoryKey' },
				target:                   { $ref: '#/definitions/mandatoryKey' },
				addedByBagsOfPathologies: { $ref: '#/definitions/keyList'      }
			}
		}

		////////////////////////////////////////

	},
	paths: {

		// TODO: enforce that name/uri-ish fields are not empty strings

		'/lyphTemplates': {
			get: {
				summary: "find all lyph templates",
				responses: {
					200: {
						description: "the list of requested lyph templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LyphTemplate' } }
					}
				}
			},
			post: {
				summary: "create a new lyph template",
				responses: {

				}
			}
		},

		'/lyphTemplates/{lyphTemplate}': {
			get: {
				summary: "find lyph templates by id",
				responses: {
					200: {
						description: "the list of requested lyph templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LyphTemplate' } }
					}
				}
			},
			put: {
				summary: "replace a particular lyph template",
				responses: {

				}
			},
			post: {
				summary: "update a particular lyph template",
				responses: {

				}
			},
			delete: {
				summary: "delete a particular lyph template",
				responses: {

				}
			}
		},

		'/lyphTemplates/{lyphTemplate}/layers': {
			get: {
				summary: "find all the layers of a particular lyph template",
				responses: {
					200: {
						description: "the list of requested layer templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LayerTemplate' } }
					}
				}
			},
			post: {
				summary: "create and add a layer to a particular lyph template",
				responses: {

				}
			}
		},

		'/lyphTemplates/{lyphTemplate}/layers/{layer}': {
			put: {
				summary: "add a particular layer to a particular lyph template",
				responses: {

				}
			},
			delete: {
				summary: "delete a layer from a particular lyph template",
				responses: {

				}
			}
		},

		'/lyphTemplates/{lyphTemplate}/materialIn': {
			get: {
				summary: "find the layer templates in which a particular lyph is a material",
				responses: {
					200: {
						description: "the list of requested layer templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LayerTemplate' } }
					}
				}
			}
		},

		'/lyphTemplates/{lyphTemplate}/materialIn/{layer}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/lyphTemplates/{lyphTemplate}/instantiations': {
			get: {
				summary: "find all lyphs instantiated from a particular lyph template",
				responses: {
					200: {
						description: "the list of requested lyphs",
						schema: { type: 'array', items: { $ref: '#/definitions/LyphTemplate' } }
					}
				}
			}
			// intentionally no other verbs (instantiation has 1 template from creation)
		},

		// intentionally no "/lyphTemplates/{id}/instantiatedLyphs/{id2}" (instantiation has 1 template from creation)

		'/layerTemplates': {
			// field: lyphTemplate
			get: {
				summary: "find all layer templates",
				responses: {
					200: {
						description: "the list of requested layer templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LayerTemplate' } }
					}
				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/layerTemplates/{layerTemplate}': {
			get: {
				summary: "find layer templates by id",
				responses: {
					200: {
						description: "the list of requested layer templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LayerTemplate' } }
					}
				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/layerTemplates/{layerTemplate}/materials': {
			get: {
				summary: "find all lyph templates acting as materials in a particular layer template",
				responses: {
					200: {
						description: "the list of requested lyph templates",
						schema: { type: 'array', items: { $ref: '#/definitions/LyphTemplate' } }
					}
				}
			}
		},

		'/layerTemplates/{layerTemplate}/materials/{lyphTemplate}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			},
		},

		'/layerTemplates/{layerTemplate}/instantiations': {
			get: {
				summary: "find all layers instantiated from a particular layer template",
				responses: {
					200: {
						description: "the list of requested layers",
						schema: { type: 'array', items: { $ref: '#/definitions/Layer' } }
					}
				}
			}
			// intentionally no other verbs (instantiation has 1 template from creation)
		},

		// intentionally no "/layerTemplates/{id}/instantiations/{id2}" (instantiation has 1 template from creation)

		'/lyphs': {
			get: {
				summary: "find all lyphs",
				responses: {
					200: {
						description: "the list of requested lyphs",
						schema: { type: 'array', items: { $ref: '#/definitions/Lyph' } }
					}
				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}': {
			get: {
				summary: "find lyphs by id",
				responses: {
					200: {
						description: "the list of requested lyphs",
						schema: { type: 'array', items: { $ref: '#/definitions/Lyph' } }
					}
				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}/layers': {
			get: {
				summary: "find all the layers of a particular lyph",
				responses: {
					200: {
						description: "the list of requested layers",
						schema: { type: 'array', items: { $ref: '#/definitions/Layer' } }
					}
				}
			}
			// intentionally no other verbs (layers sync through templates)
		},

		// intentionally no "/lyphs/{id}/layers/{id2}" (layers sync through templates)

		'/lyphs/{lyph}/locatedMeasures': {
			get: {
				summary: "find all located measures located in a particular lyph",
				responses: {
					200: {
						description: "the list of requested located measures",
						schema: { type: 'array', items: { $ref: '#/definitions/LocatedMeasure' } }
					}
				}
			}
		},

		'/lyphs/{lyph}/locatedMeasures/{locatedMeasure}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}/inCompartments': {
			get: {
				summary: "find all compartments in which a particular lyph is a member",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}/inCompartments/{compartment}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}/inLayers': {
			// TODO: enforce that if a lyph is in more than 1 layer, that all those layers coalesce
			get: {
				summary: "find the layer(s) in which a particular lyph is located",
				responses: {

				}
			}
		},

		'/lyphs/{lyph}/inLayers/{layer}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/layers': {
			get: {
				summary: "find all lyph-layers",
				responses: {

				}
			}
			// intentionally no other verbs (layers sync through templates)
		},

		'/layers/{layer}': {
			get: {
				summary: "find lyph-layers by id",
				responses: {

				}
			}
			// intentionally no other verbs (layers sync through templates)
		},

		'/layers/{layer}/lyphs': {
			get: {
				summary: "find all lyphs that are located in a particular layer",
				responses: {

				}
			}
		},

		'/layers/{layer}/lyphs/{lyph}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/layers/{layer}/{border}/nodes': {
			get: {
				summary: "find all nodes that are located on a particular border of a particular layer",
				responses: {

				}
			}
		},

		'/layers/{layer}/{border}/nodes/{node}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/layers/{layer}/coalescesWith': {
			// TODO: enforce symmetry of coalescence
			// TODO: enforce that each coalescing layer is the outermost layer of its lyph
			// TODO: enforce that all coalescing layers have the same layer template
			get: {
				summary: "find all layers that coalesce with a particular other layer",
				responses: {

				}
			}
		},

		'/layers/{layer}/coalescesWith/{layer2}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: avoid loops in "/layerTemplates/{id}/materials" + "/lyphTemplates/{id}/layers" relationships
		// TODO: avoid loops in "/lyphs/{id}/layers"             + "/layers/{id}/lyphs"         relationships
		// TODO: enforce that the positions of layers start at 0 and are sequential / without gaps

		// DONE: enforce that layers of instantiated lyphs correspond to the layer(Template)s of the lyph template
		// done by auto-syncing from layerTemplates to layers

		'/compartments/{compartment}/lyphs': {
			get: {
				summary: "find all lyphs that are members of a particular compartment",
				responses: {

				}
			}
		},

		'/compartments/{compartment}/lyphs/{lyph}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/nodes': {
			get: {
				summary: "find all nodes",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/nodes/{node}': {
			get: {
				summary: "find nodes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/nodes/{node}/attachments': {
			get: {
				summary: "find all borders attached to a specific node",
				responses: {

				}
			}
		},

		'/nodes/{node}/attachments/{layer}/{border}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a node is not on the inner border of layer 0 (the axis)
		// TODO: enforce that a node cannot be on more than one border of the same layer
		// TODO: enforce that when a node is placed 'between' layers, it is registered on both (inner, outer)
		// TODO: enforce node placement w.r.t. coalescence
		// TODO: if a node is on plus/minus of lyphA(layer i), and on outer/inner of lyphB(layer j),
		//     : then lyphA is inside of lyphB(layer j +/- 1)
		//     : (unless it's the outer border of the outer layer of lyphB; then it's not necessary)
		//     : IN OTHER WORDS: orthogonal placement of lyph inside housing layer

		'/correlations': {
			// field: publication
			get: {
				summary: "find all correlations",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/correlations/{correlation}': {
			get: {
				summary: "find correlations by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/correlations/{correlation}/clinicalIndices': {
			get: {
				summary: "find all clinical indices involved in a specific correlation",
				responses: {

				}
			}
		},

		'/correlations/{correlation}/clinicalIndices/{clinicalIndex}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/correlations/{correlation}/locatedMeasures': {
			get: {
				summary: "find all located measures involved in a specific correlation",
				responses: {

				}
			}
		},

		'/correlations/{correlation}/locatedMeasures/{locatedMeasure}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a correlation has >= 2 variables associated with it

		'/publications': {
			get: {
				summary: "find all publications",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/publications/{publication}': {
			// fields: uri (e.g., pubmed)
			get: {
				summary: "find publications by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/publications/{publication}/correlations': {
			get: {
				summary: "find all correlations described in a particular publication",
				responses: {

				}
			}
		},

		'/publications/{publication}/correlations/{correlation}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that no two publications have the same 'pubmed uri'

		'/clinicalIndices': {
			get: {
				summary: "find all clinical indices",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/clinicalIndices/{clinicalIndex}': {
			get: {
				summary: "find clinical indices by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/clinicalIndices/{clinicalIndex}/correlations': {
			get: {
				summary: "find all correlations in which a particular clinical index is involved",
				responses: {

				}
			}
		},

		'/clinicalIndices/{clinicalIndex}/correlations/{correlation}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/locatedMeasures': {
			get: {
				summary: "find all located measures",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/locatedMeasures/{locatedMeasure}': {
			get: {
				summary: "find located measures by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/locatedMeasures/{locatedMeasure}/correlations': {
			get: {
				summary: "find all correlations in which a particular located measure is involved",
				responses: {

				}
			}
		},

		'/locatedMeasures/{locatedMeasure}/correlations/{correlation}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/locatedMeasures/{locatedMeasure}/bagsOfPathologies': {
			get: {
				summary: "find all bags of pathologies in which a particular located measure is involved",
				responses: {

				}
			}
		},

		'/locatedMeasures/{locatedMeasure}/bagsOfPathologies/{bagOfPathologies}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/bagsOfPathologies': {
			get: {
				summary: "find all bags of pathologies",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}': {
			get: {
				summary: "find bags of pathologies by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/locatedMeasures': {
			get: {
				summary: "find all located measures associated with a specific bag of pathologies",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/locatedMeasures/{locatedMeasure}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/removedProcesses': {
			get: {
				summary: "find all processes removed by a specific bag of pathologies",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/removedProcesses/{process}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/addedProcesses': {
			get: {
				summary: "find all potential processes added by a specific bag of pathologies",
				responses: {

				}
			}
		},

		'/bagsOfPathologies/{bagOfPathologies}/addedProcesses/{potentialProcess}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/processes': {
			get: {
				summary: "find all processes",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/processes/{process}': {
			get: {
				summary: "find processes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a process does not go from x to y, when x and y are on the same border

		'/processes/{process}/removedByBagsOfPathologies': {
			get: {
				summary: "find all bags of pathologies that remove a particular process",
				responses: {

				}
			}
		},

		'/processes/{process}/removedByBagsOfPathologies/{bagOfPathologies}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		// TODO: enforce that a bag of pathologies has at least one 'thing' in it

		'/potentialProcesses': {
			// fields: from, to (nodes)
			get: {
				summary: "find all potential processes",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			}
		},

		'/potentialProcesses/{potentialProcess}': {
			get: {
				summary: "find potential processes by id",
				responses: {

				}
			},
			put: {
				summary: "",
				responses: {

				}
			},
			post: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		},

		'/potentialProcesses/{potentialProcess}/addedByBagsOfPathologies': {
			get: {
				summary: "find all bags of pathologies that add a particular potential process",
				responses: {

				}
			}
		},

		'/potentialProcesses/{potentialProcess}/addedByBagsOfPathologies/{bagOfPathologies}': {
			put: {
				summary: "",
				responses: {

				}
			},
			delete: {
				summary: "",
				responses: {

				}
			}
		}

	}
}
